from typing import overload
from core.db.models import UserModel, ConnectionPeerModel
from core.db.model_serializer import User


class Client:
    """
    General class for operating with single client. 
    All methods that perform I/O operations **should** be used with `atomic` context manager.

    Example:
        >>> client = Client(tg_id=<telegram_id>)
        >>> with db.atomic():
        ...    client.create_client()
    """
    @overload
    def delete_client(self) -> bool: ...
    @overload
    def delete_client(self, ip_address: str) -> bool: ...
    @overload
    def delete_peer(self) -> bool: ...
    @overload
    def delete_peer(self, ip_address: str) -> bool: ...
    def is_registered(self) -> bool: ...
    def get_client_model(self) -> UserModel: ...
    def get_client(self) -> User: ...
    def create_client(self, name: str, **kwargs) -> UserModel: ...
    def update_client(self, **kwargs) -> bool: ...
    def add_peer(self, public_key: str, preshared_key: str, shared_ips: str): ...
    def get_peers(self) -> list[ConnectionPeerModel]: ...


class Users:
    """
    Class for working with multiple users at the same time for implementing something...

    _**NaStY**_
    """
    def get_users() -> list[User]: ...
